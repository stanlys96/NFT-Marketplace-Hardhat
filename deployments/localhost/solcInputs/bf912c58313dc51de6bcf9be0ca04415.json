{
  "language": "Solidity",
  "sources": {
    "contracts/NftMarketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// 1. List item\n// 2. Cancel listing\n// 3. Buy item\n// 4. Update listing\n// 5. Withdraw proceeds\n// 6. Get listing\n// 7. Get proceeds\n// 8. Random comment\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nerror NftMarketplace__PriceMustBeAboveZero();\nerror NftMarketplace__NotApprovedForMarketplace();\nerror NftMarketplace__PriceNotMet(\n    address nftAddress,\n    uint256 tokenId,\n    uint256 price\n);\nerror NftMarketplace__NoProceeds();\nerror NftMarketplace__AlreadyListed(address nftAddress, uint256 tokenId);\nerror NftMarketplace__NotListed(address nftAddress, uint256 tokenId);\nerror NftMarketplace__TheOwner();\nerror NftMarketplace__NotOwner();\n\ncontract NftMarketplace is ReentrancyGuard {\n    struct Listing {\n        uint256 price;\n        address seller;\n    }\n\n    struct CompleteListing {\n        uint256 price;\n        address seller;\n        address nftAddress;\n        uint256 tokenId;\n    }\n\n    CompleteListing[] private s_completeListing;\n\n    mapping(address => mapping(uint256 => Listing)) private s_listings;\n    mapping(address => uint256) private s_proceeds;\n\n    event ItemListed(\n        address indexed seller,\n        address indexed nftAddress,\n        uint256 indexed tokenId,\n        uint256 price\n    );\n\n    event ItemCanceled(\n        address indexed seller,\n        address indexed nftAddress,\n        uint256 indexed tokenId\n    );\n\n    event ItemBought(\n        address indexed buyer,\n        address indexed nftAddress,\n        uint256 indexed tokenId,\n        uint256 price\n    );\n\n    modifier isListed(\n        address nftAddress,\n        uint256 tokenId,\n        bool shouldBeListed\n    ) {\n        Listing memory listedItem = s_listings[nftAddress][tokenId];\n        if (listedItem.price > 0 && shouldBeListed == false) {\n            revert NftMarketplace__AlreadyListed(nftAddress, tokenId);\n        } else if (listedItem.price <= 0 && shouldBeListed == true) {\n            revert NftMarketplace__NotListed(nftAddress, tokenId);\n        }\n        _;\n    }\n\n    modifier isOwner(\n        address nftAddress,\n        uint256 tokenId,\n        address spender,\n        bool shouldBeOwner\n    ) {\n        IERC721 nft = IERC721(nftAddress);\n        address owner = nft.ownerOf(tokenId);\n        if (owner != spender && shouldBeOwner == true) {\n            revert NftMarketplace__NotOwner();\n        } else if (owner == spender && shouldBeOwner == false) {\n            revert NftMarketplace__TheOwner();\n        }\n        _;\n    }\n\n    function listItem(\n        address nftAddress,\n        uint256 tokenId,\n        uint256 price\n    )\n        external\n        isListed(nftAddress, tokenId, false)\n        isOwner(nftAddress, tokenId, msg.sender, true)\n    {\n        if (price <= 0) {\n            revert NftMarketplace__PriceMustBeAboveZero();\n        }\n        IERC721 nft = IERC721(nftAddress);\n        if (nft.getApproved(tokenId) != address(this)) {\n            revert NftMarketplace__NotApprovedForMarketplace();\n        }\n        address nftAddressTemp = nftAddress;\n        uint256 tokenIdTemp = tokenId;\n        uint256 priceTemp = price;\n        s_listings[nftAddressTemp][tokenIdTemp] = Listing(\n            priceTemp,\n            msg.sender\n        );\n        s_completeListing.push(\n            CompleteListing(priceTemp, msg.sender, nftAddressTemp, tokenIdTemp)\n        );\n        emit ItemListed(msg.sender, nftAddressTemp, tokenIdTemp, priceTemp);\n    }\n\n    function cancelListing(address nftAddress, uint256 tokenId)\n        external\n        isListed(nftAddress, tokenId, true)\n        isOwner(nftAddress, tokenId, msg.sender, true)\n    {\n        delete s_listings[nftAddress][tokenId];\n        removeCompleteListing(nftAddress, tokenId);\n        emit ItemCanceled(msg.sender, nftAddress, tokenId);\n    }\n\n    function buyItem(address nftAddress, uint256 tokenId)\n        external\n        payable\n        nonReentrant\n        isListed(nftAddress, tokenId, true)\n        isOwner(nftAddress, tokenId, msg.sender, false)\n    {\n        Listing memory listedItem = s_listings[nftAddress][tokenId];\n        if (msg.value < listedItem.price) {\n            revert NftMarketplace__PriceNotMet(\n                nftAddress,\n                tokenId,\n                listedItem.price\n            );\n        }\n        s_proceeds[listedItem.seller] += msg.value;\n        delete s_listings[nftAddress][tokenId];\n        removeCompleteListing(nftAddress, tokenId);\n        IERC721(nftAddress).safeTransferFrom(\n            listedItem.seller,\n            msg.sender,\n            tokenId\n        );\n        emit ItemBought(msg.sender, nftAddress, tokenId, listedItem.price);\n    }\n\n    function updateListing(\n        address nftAddress,\n        uint256 tokenId,\n        uint256 newPrice\n    )\n        external\n        nonReentrant\n        isListed(nftAddress, tokenId, true)\n        isOwner(nftAddress, tokenId, msg.sender, true)\n    {\n        if (newPrice <= 0) {\n            revert NftMarketplace__PriceMustBeAboveZero();\n        }\n        s_listings[nftAddress][tokenId].price = newPrice;\n        updateCompleteListing(nftAddress, tokenId, newPrice);\n        emit ItemListed(msg.sender, nftAddress, tokenId, newPrice);\n    }\n\n    function withdrawProceeds() external {\n        uint256 proceeds = s_proceeds[msg.sender];\n        if (proceeds <= 0) {\n            revert NftMarketplace__NoProceeds();\n        }\n        s_proceeds[msg.sender] = 0;\n        (bool success, ) = payable(msg.sender).call{value: proceeds}(\"\");\n        require(success, \"Transfer failed!\");\n    }\n\n    function removeCompleteListing(address nftAddress, uint256 tokenId) public {\n        for (uint256 index = 0; index < s_completeListing.length; index++) {\n            CompleteListing memory listedCompleteListing = s_completeListing[\n                index\n            ];\n            if (\n                listedCompleteListing.nftAddress == nftAddress &&\n                listedCompleteListing.tokenId == tokenId\n            ) {\n                if (index >= s_completeListing.length) return;\n\n                for (uint i = index; i < s_completeListing.length - 1; i++) {\n                    s_completeListing[i] = s_completeListing[i + 1];\n                }\n                s_completeListing.pop();\n                break;\n            }\n        }\n    }\n\n    function updateCompleteListing(\n        address nftAddress,\n        uint256 tokenId,\n        uint256 newPrice\n    ) public {\n        for (uint256 index = 0; index < s_completeListing.length; index++) {\n            CompleteListing memory listedCompleteListing = s_completeListing[\n                index\n            ];\n            if (\n                listedCompleteListing.nftAddress == nftAddress &&\n                listedCompleteListing.tokenId == tokenId\n            ) {\n                s_completeListing[index].price = newPrice;\n                break;\n            }\n        }\n    }\n\n    function getListing(address nftAddress, uint256 tokenId)\n        external\n        view\n        returns (Listing memory)\n    {\n        return s_listings[nftAddress][tokenId];\n    }\n\n    function getCompleteListing()\n        external\n        view\n        returns (CompleteListing[] memory)\n    {\n        return s_completeListing;\n    }\n\n    function getCompleteListingByIndex(uint256 index)\n        external\n        view\n        returns (CompleteListing memory)\n    {\n        return s_completeListing[index];\n    }\n\n    function getCompleteListingLength() external view returns (uint256) {\n        return s_completeListing.length;\n    }\n\n    function getProceeds(address seller) external view returns (uint256) {\n        return s_proceeds[seller];\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}